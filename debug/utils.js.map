{"version":3,"sources":["utils.ts"],"names":["colors","index","cache","colorLog","pkg","color","str","chalk","bold","length","eventColor","eventType","black","unlink","bgRed","add","bgGreen","change","bgYellow","unlinkDir","addDir","registerBabel","only","bebelConifg","target","disableTypes","require","extensions","babelrc","isDefault","obj","default","mergeConfig","defaultConfig","configs","ret","forEach","config","Object","keys","key","val"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;;;;;;;;;;AAEA,MAAMA,MAAM,GAAG,CACb,KADa,EAEb,OAFa,EAGb,QAHa,EAIb,MAJa,EAKb,SALa,EAMb,MANa,EAOb,WAPa,EAQb,aARa,EASb,cATa,EAUb,YAVa,EAWb,eAXa,EAYb,YAZa,CAAf;AAeA,IAAIC,KAAK,GAAG,CAAZ;AACA,MAAMC,KAAK,GAAG,EAAd;;AAEM,SAAUC,QAAV,CAAmBC,GAAnB,EAA8B;AAClC,MAAI,CAACF,KAAK,CAACE,GAAD,CAAV,EAAiB;AACf,UAAMC,KAAK,GAAGL,MAAM,CAACC,KAAD,CAApB;;AACA,UAAMK,GAAG,GAAGC,iBAAMF,KAAN,EAAaG,IAAb,CAAkBJ,GAAlB,CAAZ;;AACAF,IAAAA,KAAK,CAACE,GAAD,CAAL,GAAaE,GAAb;;AACA,QAAIL,KAAK,KAAKD,MAAM,CAACS,MAAP,GAAgB,CAA9B,EAAiC;AAC/BR,MAAAA,KAAK,GAAG,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,KAAK,IAAI,CAAT;AACD;AACF;;AACD,SAAOC,KAAK,CAACE,GAAD,CAAZ;AACD;;AAEK,SAAUM,UAAV,CACJC,SADI,EAC2D;AAAA,QAEvDC,KAFuD,GAE7CL,gBAF6C,CAEvDK,KAFuD;;AAG/D,SAAO;AACLC,IAAAA,MAAM,EAAED,KAAK,CAACE,KADT;AAELC,IAAAA,GAAG,EAAEH,KAAK,CAACI,OAFN;AAGLC,IAAAA,MAAM,EAAEL,KAAK,CAACM,QAHT;AAILC,IAAAA,SAAS,EAAEP,KAAK,CAACE,KAJZ;AAKLM,IAAAA,MAAM,EAAER,KAAK,CAACI;AALT,IAMLL,SANK,EAMM,IAAIA,SAAS,GANnB,CAAP;AAOD;;AAEK,SAAUU,aAAV,CAAwBC,IAAxB,EAAoC;AACxC,QAAMC,WAAW,GAAG,6BAAe;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,YAAY,EAAE;AAAhC,GAAf,CAApB;;AAEAC,EAAAA,OAAO,CAAC,iBAAD,CAAP,iCACKH,WADL;AAEEI,IAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR,CAFd;AAGEL,IAAAA,IAAI,EAAE,CAAC,sBAAMA,IAAN,CAAD,CAHR;AAIEM,IAAAA,OAAO,EAAE,KAJX;AAKE1B,IAAAA,KAAK,EAAE;AALT;AAOD;;AAEK,SAAU2B,SAAV,CAAoBC,GAApB,EAA4B;AAAA;;AAChC,yBAAOA,GAAG,CAACC,OAAX,uDAAsBD,GAAtB;AACD;;AAEK,SAAUE,WAAV,CAGJC,aAHI,EAGc,GAAGC,OAHjB,EAGgE;AACpE,QAAMC,GAAG,qBAAQF,aAAR,CAAT;;AACAC,EAAAA,OAAO,CAACE,OAAR,CAAiBC,MAAD,IAAW;AACzB,QAAI,CAACA,MAAL,EAAa;AACXC,IAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAgDD,OAAhD,CAAyDI,GAAD,IAAQ;AAChE,YAAMC,GAAG,GAAGJ,MAAM,CAACG,GAAD,CAAlB;;AACA,UAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AAC7BN,QAAAA,GAAG,CAACK,GAAD,CAAH,GAAWC,GAAG,CAACN,GAAG,CAACK,GAAD,CAAJ,CAAd;AACD,OAFD,MAEO;AACLL,QAAAA,GAAG,CAACK,GAAD,CAAH,GAAWC,GAAX;AACD;AACF,KAPC;AAQH,GAVD;AAWA,SAAON,GAAP;AACD","file":"utils.js","sourcesContent":["import chalk from 'chalk'\nimport slash from 'slash'\n\nimport { AnyConfig, CalculatedConfig } from './types'\nimport getBabelConfig from './getBabelConifg'\n\nconst colors = [\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'magenta',\n  'cyan',\n  'redBright',\n  'greenBright',\n  'yellowBright',\n  'blueBright',\n  'magentaBright',\n  'cyanBright'\n]\n\nlet index = 0\nconst cache = {}\n\nexport function colorLog(pkg: string) {\n  if (!cache[pkg]) {\n    const color = colors[index]\n    const str = chalk[color].bold(pkg)\n    cache[pkg] = str\n    if (index === colors.length - 1) {\n      index = 0\n    } else {\n      index += 1\n    }\n  }\n  return cache[pkg]\n}\n\nexport function eventColor(\n  eventType: 'unlink' | 'add' | 'change' | 'addDir' | 'unlinkDir'\n) {\n  const { black } = chalk\n  return {\n    unlink: black.bgRed,\n    add: black.bgGreen,\n    change: black.bgYellow,\n    unlinkDir: black.bgRed,\n    addDir: black.bgGreen\n  }[eventType](` ${eventType} `)\n}\n\nexport function registerBabel(only: string) {\n  const bebelConifg = getBabelConfig({ target: 'node', disableTypes: true })\n\n  require('@babel/register')({\n    ...bebelConifg,\n    extensions: ['.js', '.ts'],\n    only: [slash(only)],\n    babelrc: false,\n    cache: false\n  })\n}\n\nexport function isDefault(obj: any) {\n  return obj.default ?? obj\n}\n\nexport function mergeConfig<\n  T extends Record<string, any>,\n  U extends Record<string, any>\n>(defaultConfig: T, ...configs: (AnyConfig<T, U> | null | undefined)[]) {\n  const ret = { ...defaultConfig } as Partial<CalculatedConfig<T, U>>\n  configs.forEach((config) => {\n    if (!config) return\n    ;(Object.keys(config) as (keyof typeof config)[]).forEach((key) => {\n      const val = config[key]\n      if (typeof val === 'function') {\n        ret[key] = val(ret[key])\n      } else {\n        ret[key] = val as CalculatedConfig<T, U>[typeof key]\n      }\n    })\n  })\n  return ret as CalculatedConfig<T, U>\n}\n"],"sourceRoot":"/Users/zoy/zmi-nerd/src"}