{"version":3,"sources":["Build.ts"],"names":["modeType","cjs","esm","Build","constructor","options","rootConfig","cwd","process","userConfig","customPrefix","watch","isLerna","fs","existsSync","path","join","logInfo","pkg","msg","console","log","applyHook","func","args","through","obj","addDefaultConfigValue","config","entry","output","target","moduleType","sourceMaps","getBundleOpts","bundleOpts","transform","opts","content","paths","currentDir","esBuild","nodeFiles","browserFiles","isBrowser","test","currentPath","relative","includes","esBuildConfig","babelConfig","filename","configFile","isTransform","regExp","filePath","endsWith","createStream","src","dir","beforeReadWriteStream","mountedReadWriteStream","afterReadWriteStream","mapSources","tsConfig","error","basePath","compilerOptions","declaration","disableTypes","tsConifgError","vinylFs","base","allowEmpty","pipe","gulpSourcemaps","init","insert","gulpIf","contents","file","_paths","Object","keys","length","dirname","ext","extname","aliasMap","chunk","_enc","callback","res","replaceExtname","replace","Buffer","from","code","sourceMap","map","JSON","parse","sources","require","logType","chalk","yellow","logOutput","blue","write","sourceRoot","dest","compileLerna","userPkgs","readdirSync","userConifg","pkgs","reduce","memo","pkgPath","statSync","isDirectory","concat","chdir","compile","redBright","rimraf","sync","red","Promise","resolve","srcPath","patterns","on","messageText","watcher","chokidar","ignoreInitial","awaitWriteFinish","stabilityThreshold","files","event","fullPath","relPath","outPath","fullLibPath","isFile","push","pop","once","close","step"],"mappings":"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","file":"Build.js","sourcesContent":["import { transformSync as babelTransformSync } from '@babel/core'\nimport { transformSync as esBuildTransformSync } from 'esbuild'\nimport gulpSourcemaps from 'gulp-sourcemaps'\nimport { Diagnostic } from 'typescript'\nimport gulpPlumber from 'gulp-plumber'\nimport glupTs from 'gulp-typescript'\nimport insert from 'gulp-insert'\nimport { merge } from 'lodash'\nimport chokidar from 'chokidar'\nimport through from 'through2'\nimport vinylFs from 'vinyl-fs'\nimport gulpIf from 'gulp-if'\nimport rimraf from 'rimraf'\nimport assert from 'assert'\nimport chalk from 'chalk'\nimport slash from 'slash'\nimport path from 'path'\nimport fs from 'fs'\n\nimport type { IBundleOpt, IBundleOptions } from './types'\nimport getEsBuildConfig from './getEsBuildConfig'\nimport { colorLog, eventColor } from './utils'\nimport getBabelConfig from './getBabelConifg'\nimport getTSConfig from './getTsConifg'\nimport replaceAll from './replaceAll'\nimport config from './config'\n\ninterface IBuild {\n  cwd?: string\n  watch?: boolean\n  userConfig?: IBundleOptions\n  customPrefix?: string\n}\n\nconst modeType = {\n  cjs: 'Commonjs',\n  esm: 'ES Modules'\n}\n\nexport default class Build {\n  cwd: string\n\n  isLerna: boolean\n\n  watch: boolean\n\n  rootConfig = {}\n\n  userConfig: IBundleOptions | undefined\n\n  customPrefix?: string\n\n  tsConifgError: Diagnostic | undefined\n\n  constructor(options: IBuild) {\n    this.cwd = options.cwd ?? process.cwd()\n    this.userConfig = options.userConfig\n    this.customPrefix = options.customPrefix\n    this.watch = !!options.watch\n    this.isLerna = !this.userConfig\n      ? fs.existsSync(path.join(this.cwd, 'lerna.json'))\n      : false\n  }\n\n  logInfo({ pkg, msg }: { pkg?: string; msg: string }) {\n    console.log(`${pkg ? `${colorLog(pkg)}: ` : ''}${msg}`)\n  }\n\n  applyHook(func: any, args: any) {\n    return typeof func === 'function' ? func(args) : through.obj()\n  }\n\n  addDefaultConfigValue(config: IBundleOptions): IBundleOpt {\n    return merge(\n      {\n        entry: 'src',\n        output: 'lib',\n        target: 'browser',\n        moduleType: 'esm',\n        sourceMaps: false\n      },\n      config\n    )\n  }\n\n  getBundleOpts(cwd: string) {\n    const userConfig = this.userConfig ?? (config(cwd) as IBundleOpt)\n\n    // The merge method will change the source object\n    const bundleOpts = this.addDefaultConfigValue(\n      merge({ ...this.rootConfig }, userConfig)\n    )\n\n    return bundleOpts\n  }\n\n  transform(opts: {\n    content: string\n    paths: string\n    bundleOpts: IBundleOpt\n    currentDir: string\n  }) {\n    const { content, paths, bundleOpts, currentDir } = opts\n    const { esBuild, target, nodeFiles, browserFiles } = bundleOpts\n\n    let isBrowser = target === 'browser'\n\n    if (/\\.(t|j)sx$/.test(paths)) {\n      isBrowser = true\n    } else {\n      const currentPath = path.relative(currentDir, paths)\n\n      if (isBrowser && nodeFiles && nodeFiles.includes(currentPath)) {\n        isBrowser = false\n      }\n\n      if (!isBrowser && browserFiles && browserFiles.includes(currentPath)) {\n        isBrowser = true\n      }\n    }\n\n    if (esBuild) {\n      const esBuildConfig = getEsBuildConfig(bundleOpts, isBrowser, paths)\n      return esBuildTransformSync(content, esBuildConfig)\n    }\n\n    const babelConfig = getBabelConfig(bundleOpts, isBrowser)\n\n    return babelTransformSync(content, {\n      ...babelConfig,\n      filename: paths,\n      configFile: false\n    })\n  }\n\n  isTransform(regExp: RegExp, filePath: string) {\n    return regExp.test(filePath) && !filePath.endsWith('.d.ts')\n  }\n\n  createStream({\n    src,\n    pkg,\n    dir,\n    bundleOpts\n  }: {\n    pkg?: string\n    dir: string\n    src: string[] | string\n    bundleOpts: IBundleOpt\n  }) {\n    const {\n      entry,\n      output,\n      esBuild,\n      paths,\n      beforeReadWriteStream,\n      mountedReadWriteStream,\n      afterReadWriteStream,\n      mapSources,\n      sourceMaps\n    } = bundleOpts\n\n    const { tsConfig, error } = getTSConfig(this.cwd, this.isLerna ? dir : '')\n    const basePath = path.join(dir, entry)\n\n    if (tsConfig.compilerOptions.declaration === true) {\n      if (bundleOpts.disableTypes === true) {\n        tsConfig.compilerOptions.declaration = false\n      }\n    } else {\n      bundleOpts.disableTypes = true\n    }\n\n    if (error) {\n      this.tsConifgError = error\n    }\n\n    return vinylFs\n      .src(src, {\n        base: basePath,\n        allowEmpty: true\n      })\n      .pipe(gulpIf(!!sourceMaps, gulpSourcemaps.init()))\n      .pipe(\n        gulpIf(\n          this.watch,\n          gulpPlumber(() => {})\n        )\n      )\n      .pipe(this.applyHook(beforeReadWriteStream, { through, insert, gulpIf }))\n      .pipe(\n        insert.transform((contents, file) => {\n          const _paths = { ...paths }\n\n          if (Object.keys(_paths).length) {\n            const dirname = path.dirname(file.path)\n            const ext = path.extname(file.relative)\n\n            contents = replaceAll({\n              ext,\n              contents,\n              dirname,\n              aliasMap: _paths\n            })\n          }\n\n          return contents\n        })\n      )\n      .pipe(\n        gulpIf(\n          (file) =>\n            tsConfig.compilerOptions.declaration &&\n            this.isTransform(/\\.tsx?$/, file.path),\n          glupTs(tsConfig.compilerOptions)\n        )\n      )\n      .pipe(this.applyHook(mountedReadWriteStream, { through, insert, gulpIf }))\n      .pipe(\n        gulpIf(\n          (file) => this.isTransform(/\\.(t|j)sx?$/, file.path),\n          through.obj((chunk, _enc, callback) => {\n            const res: Record<string, any> = this.transform({\n              content: chunk.contents,\n              paths: slash(chunk.path),\n              bundleOpts,\n              currentDir: dir\n            })!\n\n            const replaceExtname = (file: string) =>\n              file.replace(path.extname(file), '.js')\n\n            chunk.contents = Buffer.from(res.code)\n\n            if (chunk.sourceMap && res.map) {\n              if (typeof res.map !== 'object') {\n                res.map = JSON.parse(res.map)\n\n                res.map.sources = [chunk.relative]\n              }\n\n              console.log(res.map)\n\n              res.map.file = replaceExtname(chunk.relative)\n              require('vinyl-sourcemaps-apply')(chunk, res.map)\n            }\n\n            const logType = chalk.yellow(\n              `[${this.customPrefix ?? (esBuild ? 'esBuild' : 'babel')}]:`\n            )\n            const logOutput = chalk.blue(\n              output + chunk.path.replace(basePath, '')\n            )\n\n            this.logInfo({\n              pkg,\n              msg: `➜ ${logType} for ${logOutput}`\n            })\n\n            chunk.path = replaceExtname(chunk.path)\n\n            callback(null, chunk)\n          }) as NodeJS.ReadWriteStream,\n          insert.transform((contents, file) => {\n            if (!file.path.endsWith('.d.ts')) {\n              const logType = chalk.yellow(`[${this.customPrefix ?? 'Copys'}]:`)\n              const logOutput = chalk.blue(\n                output + file.path.replace(basePath, '')\n              )\n\n              this.logInfo({\n                pkg,\n                msg: `➜ ${logType} for ${logOutput}`\n              })\n            }\n\n            return contents\n          })\n        )\n      )\n      .pipe(\n        typeof afterReadWriteStream === 'function'\n          ? afterReadWriteStream({ through, insert, gulpIf })\n          : through.obj()\n      )\n      .pipe(this.applyHook(mapSources, gulpSourcemaps.mapSources))\n      .pipe(\n        gulpIf(\n          (file) => !!sourceMaps && this.isTransform(/\\.jsx?$/, file.path),\n          sourceMaps !== true\n            ? gulpSourcemaps.write()\n            : gulpSourcemaps.write('.', {\n                sourceRoot: slash(basePath)\n              })\n        )\n      )\n      .pipe(vinylFs.dest(path.join(dir, output)))\n  }\n\n  async compileLerna() {\n    let userPkgs = fs.readdirSync(path.join(this.cwd, 'packages'))\n    const userConifg = config(this.cwd)\n\n    if (userConifg.pkgs) {\n      userPkgs = userConifg.pkgs\n    }\n\n    this.rootConfig = this.addDefaultConfigValue(userConifg)\n\n    userPkgs = userPkgs.reduce((memo, pkg) => {\n      const pkgPath = path.join(this.cwd, 'packages', pkg)\n\n      if (fs.statSync(pkgPath).isDirectory()) {\n        memo = memo.concat(pkg)\n      }\n      return memo\n    }, [] as string[])\n\n    for (const pkg of userPkgs) {\n      const pkgPath = path.join(this.cwd, 'packages', pkg)\n      assert(\n        fs.existsSync(path.join(pkgPath, 'package.json')),\n        `package.json not found in packages/${pkg}`\n      )\n      process.chdir(pkgPath)\n\n      // here is safe\n      // eslint-disable-next-line no-await-in-loop\n      await this.compile(pkgPath, pkg)\n    }\n  }\n\n  compile(dir: string, pkg?: string) {\n    const bundleOpts = this.getBundleOpts(dir)\n\n    const { entry, output } = bundleOpts\n\n    this.logInfo({\n      pkg,\n      msg: chalk.redBright(`➜ [Clean]: ${output} directory`)\n    })\n\n    rimraf.sync(path.join(dir, output))\n\n    this.logInfo({\n      pkg,\n      msg: chalk.red(\n        `➜ [Target]: ${this.customPrefix ?? modeType[bundleOpts.moduleType!]}`\n      )\n    })\n\n    const createStream = (src: string | string[]) =>\n      this.createStream({ src, pkg, dir, bundleOpts })\n\n    return new Promise<void>((resolve) => {\n      const srcPath = path.join(dir, entry)\n      const patterns = [\n        path.join(srcPath, '**/*'),\n        `!${path.join(srcPath, '**/*.mdx')}`,\n        `!${path.join(srcPath, '**/*.md')}`,\n        `!${path.join(srcPath, '**/demos{,/**}')}`,\n        `!${path.join(srcPath, '**/fixtures{,/**}')}`,\n        `!${path.join(srcPath, '**/__test__{,/**}')}`,\n        `!${path.join(srcPath, '**/*.+(test|e2e|spec).+(js|jsx|ts|tsx)')}`\n      ]\n\n      createStream(patterns).on('end', () => {\n        if (this.watch) {\n          this.logInfo({\n            pkg,\n            msg: chalk.blue(\n              `➜ Start watching ${\n                pkg ?? slash(srcPath).replace(`${this.cwd}/`, '')\n              } directory...`\n            )\n          })\n\n          if (this.tsConifgError) {\n            let { messageText } = this.tsConifgError\n            if (this.tsConifgError.code === 5012) {\n              messageText =\n                'Cannot find tsconfig.json, use the default configuration'\n            }\n            this.logInfo({\n              msg: chalk.yellow('❗' + messageText + '\\n')\n            })\n          }\n\n          const watcher = chokidar.watch(patterns, {\n            ignoreInitial: true,\n            awaitWriteFinish: {\n              stabilityThreshold: 500\n            }\n          })\n\n          const files: string[] = []\n\n          watcher.on('all', (event, fullPath) => {\n            const relPath = fullPath.replace(srcPath, '')\n            const outPath = slash(path.join(srcPath, relPath)).replace(\n              this.cwd + '/',\n              ''\n            )\n\n            this.logInfo({\n              msg: `${eventColor(event)} ${outPath}`\n            })\n\n            if (!fs.existsSync(fullPath)) {\n              const fullLibPath = fullPath.replace(entry, output)\n\n              if (fullLibPath.endsWith('.ts')) {\n                rimraf.sync(fullLibPath.replace('.ts', '.js'))\n                rimraf.sync(fullLibPath.replace('.ts', '.d.ts'))\n                return\n              }\n\n              rimraf.sync(fullLibPath)\n              return\n            }\n            if (fs.statSync(fullPath).isFile()) {\n              if (!files.includes(fullPath)) files.push(fullPath)\n              while (files.length) {\n                createStream(files.pop()!)\n              }\n            }\n          })\n          process.once('SIGINT', () => {\n            watcher.close()\n          })\n        }\n\n        resolve()\n      })\n    })\n  }\n\n  async step() {\n    if (this.isLerna) {\n      await this.compileLerna()\n    } else {\n      await this.compile(this.cwd)\n    }\n  }\n}\n"],"sourceRoot":"/Users/zoy/zmi-nerd/src"}