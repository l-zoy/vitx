{"version":3,"sources":["replaceAll.ts"],"names":["suffixPatten","prefixPattenMap","js","xml","css","relative","from","to","relativePath","path","test","getRegExp","prefixPatten","aliasName","RegExp","replaceAll","options","ext","dirname","aliasMap","contents","reg","Object","keys","map","k","join","forEach","alias","regExp","subReg","replacer","replace","match"],"mappings":";;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAJA;AACA;AAQA,MAAMA,YAAY,GAAG,kBAArB;AACA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,EAAE,EAAE,0CADkB;AAEtBC,EAAAA,GAAG,EAAE,yBAFiB;AAGtBC,EAAAA,GAAG,EAAE;AAHiB,CAAxB;;AAMA,SAASC,QAAT,CAAkBC,IAAlB,EAAgCC,EAAhC,EAA0C;AACxC,QAAMC,YAAY,GAAG,sBAAMC,gBAAKJ,QAAL,CAAcC,IAAd,EAAoBC,EAApB,CAAN,CAArB;;AAEA,MAAI,CAACC,YAAL,EAAmB;AACjB,WAAO,GAAP;AACD;;AAED,SAAO,CAAC,MAAME,IAAN,CAAWF,YAAX,CAAD,GAA4B,KAAKA,YAAY,EAA7C,GAAkDA,YAAzD;AACD;;AAED,SAASG,SAAT,CAAmBC,YAAnB,EAAuC;AACrC,SAAO,UAAUC,SAAV,EAAmB;AACxB,WAAO,IAAIC,MAAJ,CACL,OAAOF,YAAY,kBAAkBC,SAAS,IAAIb,YAAY,GADzD,EAEL,IAFK,CAAP;AAID,GALD;AAMD;;AAEa,SAAUe,UAAV,CAAqBC,OAArB,EAKb;AAAA,QACSC,GADT,GACoCD,OADpC,CACSC,GADT;AAAA,QACcC,OADd,GACoCF,OADpC,CACcE,OADd;AAAA,QACuBC,QADvB,GACoCH,OADpC,CACuBG,QADvB;AAAA,MAEOC,QAFP,GAEoBJ,OAFpB,CAEOI,QAFP;AAIC,MAAIC,GAAJ;;AACA,UAAQJ,GAAR;AACE,SAAK,KAAL;AACA,SAAK,KAAL;AACA,SAAK,MAAL;AACEI,MAAAA,GAAG,GAAGV,SAAS,CAACV,eAAe,CAACC,EAAjB,CAAf;AACA;;AACF,SAAK,MAAL;AACA,SAAK,OAAL;AACA,SAAK,OAAL;AACA,SAAK,OAAL;AACA,SAAK,SAAL;AACA,SAAK,OAAL;AACEmB,MAAAA,GAAG,GAAGV,SAAS,CAACV,eAAe,CAACG,GAAjB,CAAf;AACA;;AACF,SAAK,OAAL;AACA,SAAK,OAAL;AACEiB,MAAAA,GAAG,GAAGV,SAAS,CAACV,eAAe,CAACE,GAAjB,CAAf;AACA;;AACF,SAAK,MAAL;AACA,SAAK,MAAL;AACA;AACEkB,MAAAA,GAAG,GAAGV,SAAS,CACbW,MAAM,CAACC,IAAP,CAAYtB,eAAZ,EACGuB,GADH,CACQC,CAAD,IAAOxB,eAAe,CAACwB,CAAD,CAD7B,EAEGC,IAFH,CAEQ,GAFR,CADa,CAAf;AAKA;AA1BJ;;AA6BAJ,EAAAA,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBQ,OAAtB,CAA+BC,KAAD,IAAU;AACtC,UAAMC,MAAM,GAAGR,GAAG,CAACO,KAAD,CAAlB;AACA,UAAME,MAAM,GAAG,IAAIhB,MAAJ,CAAW,GAAGc,KAAK,IAAI5B,YAAY,GAAnC,CAAf;AACA,UAAM+B,QAAQ,GAAG,GAAG1B,QAAQ,CAACa,OAAD,EAAUC,QAAQ,CAACS,KAAD,CAAlB,CAA0B,IAAtD;AAEAR,IAAAA,QAAQ,GAAGA,QAAQ,CAACY,OAAT,CAAiBH,MAAjB,EAA0BI,KAAD,IAClCA,KAAK,CAACD,OAAN,CAAcF,MAAd,EAAsBC,QAAtB,CADS,CAAX;AAGD,GARD;AAUA,SAAOX,QAAP;AACD","file":"replaceAll.js","sourcesContent":["// The main part comes from the link below, with appropriate modifications\n// https://github.com/CryUshio/gulp-path-alias#readme\n\nimport path from 'path'\nimport slash from 'slash'\n\ntype AliasMapType = Record<string, string>\ntype GetRegExpReturn = (name: string) => RegExp\n\nconst suffixPatten = `\\\\/|['\"]|\\\\s*\\\\)`\nconst prefixPattenMap = {\n  js: `import\\\\s*[^'\"]*\\\\(?|from|require\\\\s*\\\\(`,\n  xml: `src=|url=|poster=|href=`, // poster: wxml\n  css: `@import\\\\s*|url\\\\s*\\\\(`\n}\n\nfunction relative(from: string, to: string) {\n  const relativePath = slash(path.relative(from, to))\n\n  if (!relativePath) {\n    return '.'\n  }\n\n  return !/^\\./.test(relativePath) ? `./${relativePath}` : relativePath\n}\n\nfunction getRegExp(prefixPatten: string): GetRegExpReturn {\n  return function (aliasName) {\n    return new RegExp(\n      `(?:(${prefixPatten})\\\\s*['\"]?\\\\s*)${aliasName}(${suffixPatten})`,\n      'gm'\n    )\n  }\n}\n\nexport default function replaceAll(options: {\n  ext: string\n  contents: string\n  dirname: string\n  aliasMap: AliasMapType\n}) {\n  const { ext, dirname, aliasMap } = options\n  let { contents } = options\n\n  let reg: GetRegExpReturn\n  switch (ext) {\n    case '.js':\n    case '.ts':\n    case '.wxs':\n      reg = getRegExp(prefixPattenMap.js)\n      break\n    case '.css':\n    case '.less':\n    case '.scss':\n    case '.styl':\n    case '.stylus':\n    case '.wxss':\n      reg = getRegExp(prefixPattenMap.css)\n      break\n    case '.html':\n    case '.wxml':\n      reg = getRegExp(prefixPattenMap.xml)\n      break\n    case '.jsx':\n    case '.tsx':\n    default:\n      reg = getRegExp(\n        Object.keys(prefixPattenMap)\n          .map((k) => prefixPattenMap[k])\n          .join('|')\n      )\n      break\n  }\n\n  Object.keys(aliasMap).forEach((alias) => {\n    const regExp = reg(alias)\n    const subReg = new RegExp(`${alias}(${suffixPatten})`)\n    const replacer = `${relative(dirname, aliasMap[alias])}$1`\n\n    contents = contents.replace(regExp, (match) =>\n      match.replace(subReg, replacer)\n    )\n  })\n\n  return contents\n}\n"],"sourceRoot":"/Users/zoy/zmi-nerd/src"}