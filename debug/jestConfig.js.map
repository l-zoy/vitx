{"version":3,"sources":["jestConfig.ts"],"names":["defaultConfig","cwd","args","testMatchTypes","hasSrc","fs","existsSync","path","join","isLerna","hasPackage","package","testMatchPrefix","collectCoverageFrom","filter","Boolean","testPathIgnorePatterns","moduleFileExtensions","testMatch","transform","require","resolve","verbose"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAIc,SAAUA,aAAV,CAAwBC,GAAxB,EAAqCC,IAArC,EAAoD;AAChE,QAAMC,cAAc,GAAG,CAAC,MAAD,EAAS,MAAT,CAAvB;;AACA,QAAMC,MAAM,GAAGC,cAAGC,UAAH,CAAcC,gBAAKC,IAAL,CAAUP,GAAV,EAAe,KAAf,CAAd,CAAf;;AAEA,QAAMQ,OAAO,GAAGJ,cAAGC,UAAH,CAAcC,gBAAKC,IAAL,CAAUP,GAAV,EAAe,YAAf,CAAd,CAAhB;;AACA,QAAMS,UAAU,GAAGD,OAAO,IAAIP,IAAI,CAACS,OAAnC;AACA,QAAMC,eAAe,GAAGF,UAAU,GAAG,eAAeR,IAAI,CAACS,OAAO,GAA9B,GAAoC,EAAtE;AAEA,SAAO;AACLE,IAAAA,mBAAmB,EAAE,CACnB,uBADmB,EAEnBT,MAAM,IAAI,0BAFS,EAGnBK,OAAO,IAAI,CAACP,IAAI,CAACS,OAAjB,IAA4B,qCAHT,EAInBF,OAAO,IACLP,IAAI,CAACS,OADP,IAEE,YAAYT,IAAI,CAACS,OAAO,2BANP,EAOnB,qBAPmB,EAQnB,iBARmB,EASnB,iBATmB,EAUnB,iBAVmB,EAWnB,gBAXmB,EAYnB,cAZmB,EAanB,YAbmB,EAcnBG,MAdmB,CAcZC,OAdY,CADhB;AAgBLC,IAAAA,sBAAsB,EAAE,CAAC,gBAAD,CAhBnB;AAiBLC,IAAAA,oBAAoB,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,EAA2B,MAA3B,CAjBjB;AAkBLC,IAAAA,SAAS,EAAE,CACT,GAAGN,eAAe,UAAUT,cAAc,CAACK,IAAf,CAAoB,GAApB,CAAwB,cAD3C,CAlBN;AAqBLW,IAAAA,SAAS,EAAE;AACT,yBAAmBC,OAAO,CAACC,OAAR,CAAgB,QAAhB;AADV,KArBN;AAwBLC,IAAAA,OAAO,EAAE;AAxBJ,GAAP;AA0BD","file":"jestConfig.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\n\nimport { ITestArgs } from './types'\n\nexport default function defaultConfig(cwd: string, args: ITestArgs) {\n  const testMatchTypes = ['spec', 'test']\n  const hasSrc = fs.existsSync(path.join(cwd, 'src'))\n\n  const isLerna = fs.existsSync(path.join(cwd, 'lerna.json'))\n  const hasPackage = isLerna && args.package\n  const testMatchPrefix = hasPackage ? `**/packages/${args.package}/` : ''\n\n  return {\n    collectCoverageFrom: [\n      'index.{js,jsx,ts,tsx}',\n      hasSrc && 'src/**/*.{js,jsx,ts,tsx}',\n      isLerna && !args.package && 'packages/*/src/**/*.{js,jsx,ts,tsx}',\n      isLerna &&\n        args.package &&\n        `packages/${args.package}/src/**/*.{js,jsx,ts,tsx}`,\n      '!**/node_modules/**',\n      '!**/fixtures/**',\n      '!**/__test__/**',\n      '!**/examples/**',\n      '!**/typings/**',\n      '!**/types/**',\n      '!**/*.d.ts'\n    ].filter(Boolean),\n    testPathIgnorePatterns: ['/node_modules/'],\n    moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json'],\n    testMatch: [\n      `${testMatchPrefix}**/?*.(${testMatchTypes.join('|')}).(j|t)s?(x)`\n    ],\n    transform: {\n      '^.+\\\\.(j|t)sx?$': require.resolve('./ecma')\n    },\n    verbose: true\n  }\n}\n"],"sourceRoot":"/Users/zoy/zmi-nerd/src"}