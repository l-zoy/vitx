{"version":3,"sources":["getTsConifg.ts"],"names":["getTSConfig","cwd","pkgPath","fileName","readFile","path","fs","readFileSync","rootTsConfig","ts","readConfigFile","join","pkgsConifg","error","config","compilerOptions","allowSyntheticDefaultImports","declaration","skipLibCheck","module","target","moduleResolution","tsConfig"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEc,SAAUA,WAAV,CAAsBC,GAAtB,EAAmCC,OAAnC,EAA8D;AAC1E,QAAMC,QAAQ,GAAG,eAAjB;;AAEA,QAAMC,QAAQ,GAAIC,IAAD,IAAkBC,cAAGC,YAAH,CAAgBF,IAAhB,EAAsB,OAAtB,CAAnC;;AAEA,QAAMG,YAAY,GAAGC,sBAAGC,cAAH,CAAkBL,gBAAKM,IAAL,CAAUV,GAAV,EAAeE,QAAf,CAAlB,EAA4CC,QAA5C,CAArB;;AACA,QAAMQ,UAAU,GAAGH,sBAAGC,cAAH,CACjBL,gBAAKM,IAAL,CAAUT,OAAV,aAAUA,OAAV,cAAUA,OAAV,GAAqB,EAArB,EAAyBC,QAAzB,CADiB,EAEjBC,QAFiB,CAAnB;;AAKA,MAAII,YAAY,CAACK,KAAjB,EAAwB;AACtBL,IAAAA,YAAY,CAACM,MAAb,CAAoBC,eAApB,GAAsC;AACpCC,MAAAA,4BAA4B,EAAE,IADM;AAEpCC,MAAAA,WAAW,EAAE,IAFuB;AAGpCC,MAAAA,YAAY,EAAE,IAHsB;AAIpCC,MAAAA,MAAM,EAAE,QAJ4B;AAKpCC,MAAAA,MAAM,EAAE,QAL4B;AAMpCC,MAAAA,gBAAgB,EAAE;AANkB,KAAtC;AAQD;;AAED,MAAI,CAACT,UAAU,CAACC,KAAhB,EAAuB;AACrBL,IAAAA,YAAY,CAACM,MAAb,CAAoBC,eAApB,GAAsC,qBACpCP,YAAY,CAACM,MAAb,CAAoBC,eADgB,EAEpCH,UAAU,CAACE,MAAX,CAAkBC,eAFkB,CAAtC;AAID;;AAED,SAAO;AACLO,IAAAA,QAAQ,EAAEd,YAAY,CAACM,MADlB;AAELD,IAAAA,KAAK,EAAEL,YAAY,CAACK;AAFf,GAAP;AAID","file":"getTsConifg.js","sourcesContent":["import { merge } from 'lodash'\nimport ts from 'typescript'\nimport path from 'path'\nimport fs from 'fs'\n\nexport default function getTSConfig(cwd: string, pkgPath: string | undefined) {\n  const fileName = 'tsconfig.json'\n\n  const readFile = (path: string) => fs.readFileSync(path, 'utf-8')\n\n  const rootTsConfig = ts.readConfigFile(path.join(cwd, fileName), readFile)\n  const pkgsConifg = ts.readConfigFile(\n    path.join(pkgPath ?? '', fileName),\n    readFile\n  )\n\n  if (rootTsConfig.error) {\n    rootTsConfig.config.compilerOptions = {\n      allowSyntheticDefaultImports: true,\n      declaration: true,\n      skipLibCheck: true,\n      module: 'esnext',\n      target: 'esnext',\n      moduleResolution: 'node'\n    }\n  }\n\n  if (!pkgsConifg.error) {\n    rootTsConfig.config.compilerOptions = merge(\n      rootTsConfig.config.compilerOptions,\n      pkgsConifg.config.compilerOptions\n    )\n  }\n\n  return {\n    tsConfig: rootTsConfig.config,\n    error: rootTsConfig.error\n  }\n}\n"],"sourceRoot":"/Users/zoy/zmi-nerd/src"}